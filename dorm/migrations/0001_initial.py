# Generated by Django 5.1.1 on 2024-11-09 19:42

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('s', models.CharField(max_length=100, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dorm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('total_places', models.PositiveIntegerField(verbose_name='Количество мест')),
                ('rooms_for_two', models.PositiveIntegerField(verbose_name='Количество комнат на 2')),
                ('rooms_for_three', models.PositiveIntegerField(verbose_name='Количество комнат на 3')),
                ('rooms_for_four', models.PositiveIntegerField(verbose_name='Количество комнат на 4')),
                ('cost', models.PositiveIntegerField(verbose_name='Стоимость')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_name', models.CharField(max_length=100, verbose_name='Область')),
            ],
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='Вопрос')),
                ('answer_variant_a', models.TextField(default=None, verbose_name='Вариант a')),
                ('answer_variant_b', models.TextField(default=None, verbose_name='Вариант b')),
                ('answer_variant_c', models.TextField(default=None, verbose_name='Вариант c')),
                ('question_type', models.CharField(choices=[('psychological', 'Психологическая совместимость'), ('daily_routine', 'Режим дня'), ('habits', 'Вредные привычки'), ('values', 'Ценности'), ('household', 'Бытовые привычки')], max_length=50, verbose_name='Тип вопроса')),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('department', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Admin',
                'verbose_name_plural': 'Admins',
                'permissions': [('can_manage_students', 'Can manage students')],
            },
            bases=('dorm.user',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('course', models.CharField(max_length=100)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dorm.region', verbose_name='Область')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
            bases=('dorm.user',),
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval', models.BooleanField(default=False, verbose_name='Одобрение')),
                ('test_answers', models.JSONField(default=dict, verbose_name='Ответы теста')),
                ('test_result', models.CharField(blank=True, max_length=1, null=True, verbose_name='Результат теста')),
                ('payment_screenshot', models.ImageField(blank=True, null=True, upload_to='payments/', verbose_name='Скрин оплаты')),
                ('priority', models.ImageField(blank=True, null=True, upload_to='priority/', verbose_name='Справка')),
                ('dormitory_choice', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dorm.dorm', verbose_name='Выбор общежития')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application', to='dorm.student', verbose_name='Студент')),
            ],
        ),
        migrations.CreateModel(
            name='StudentInDorm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room', models.CharField(blank=True, max_length=10, null=True, verbose_name='Комната')),
                ('order', models.ImageField(blank=True, null=True, upload_to='orders/', verbose_name='Ордер')),
                ('application_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Заявление', to='dorm.application', verbose_name='application')),
                ('dorm_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Общежитие', to='dorm.dorm', verbose_name='dorm')),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Студент', to='dorm.student', verbose_name='student')),
            ],
        ),
    ]
