# dorm/utils.py

import re
import torch
from pathlib import Path
from django.conf import settings
from django.core.mail import send_mail
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from .ai_model import generate_answer_from_model  # –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π AI
from dorm.models import EvidenceType, KnowledgeBase

# üì¨ Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
def send_email_notification(email, message):
    send_mail(
        subject="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã",
        message=message,
        from_email=settings.DEFAULT_FROM_EMAIL,
        recipient_list=[email],
        fail_silently=False,
    )

# üìä –ü–æ–¥—Å—á—ë—Ç –±–∞–ª–ª–æ–≤ –∑–∞—è–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä)
def calculate_application_score(application):
    score = 0
    evidences = {e.evidence_type.code: e for e in application.evidences.filter(approved=True)}
    for et in EvidenceType.objects.all():
        if et.code == 'gpa' and application.student.course != '1':
            ev = evidences.get('gpa')
            val = ev.numeric_value if ev and ev.numeric_value is not None else application.gpa
            if val is not None:
                score += et.priority * float(val)
        elif et.code == 'ent_result' and application.student.course == '1':
            ev = evidences.get('ent_result')
            val = ev.numeric_value if ev and ev.numeric_value is not None else application.ent_result
            if val is not None:
                score += et.priority * float(val)
        else:
            ev = evidences.get(et.code)
            if et.data_type == 'file' and ev and ev.file:
                score += et.priority
            elif et.data_type == 'numeric':
                val = (
                    ev.numeric_value if ev and ev.numeric_value is not None
                    else getattr(application, et.auto_fill_field, None)
                    or getattr(application.student, et.auto_fill_field, None)
                )
                if val is not None:
                    score += et.priority * float(val)
    return score

# üß† –í–µ–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏–∫–∏
vector_model = SentenceTransformer("all-MiniLM-L6-v2")

# üòü –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
def detect_emotion(q: str) -> str | None:
    mapping = {
        "–±–æ—é—Å—å": "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –≤–æ–ª–Ω–µ–Ω–∏–µ ‚Äî —Å–æ–≤–µ—Ç—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –¥–µ–∫–∞–Ω–∞—Ç—É.",
        "—Å—Ç—Ä–∞—à–Ω–æ": "–í—Å—ë —Ä–µ—à–∞–µ–º–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é.",
        "–ø–µ—Ä–µ–∂–∏–≤–∞—é": "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –º—ã –ø–æ–º–æ–∂–µ–º!",
        "–Ω–µ –¥–∞–ª–∏ –æ–±—â–∞–≥—É": "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.",
        "—á—Ç–æ –¥–∞–ª—å—à–µ –¥–µ–ª–∞—Ç—å": "–ú–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.",
        "–ø–ª–æ—Ö–æ–π –±–æ—Ç": "–ú–Ω–µ –∂–∞–ª—å, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.",
    }
    text = q.lower()
    for k, resp in mapping.items():
        if k in text:
            return resp
    return None

# üè† –í—ã—á–ª–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –æ–±—â–µ–∂–∏—Ç–∏—è
def extract_dorm_number(text: str) -> str | None:
    m = re.search(r"–æ–±—â–µ–∂–∏—Ç–∏–µ\s*‚Ññ?\s*(\d+)", text, re.IGNORECASE)
    return m.group(1) if m else None

# üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
def find_best_answer(question: str) -> str:
    ql = question.strip()
    # 1) —ç–º–æ—Ü–∏–∏
    emo = detect_emotion(ql)
    if emo:
        return emo

    # 2) –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
    entries = KnowledgeBase.objects.all()
    num = extract_dorm_number(ql)
    if num:
        for e in entries:
            if num in e.question_keywords:
                return e.answer

    # 3) —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    for e in entries:
        if e.question_keywords.lower() in ql.lower():
            return e.answer

    # 4) –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    uv = vector_model.encode([ql])
    best, score = "", 0.0
    for e in entries:
        ev = vector_model.encode([e.question_keywords])
        s = cosine_similarity(uv, ev)[0][0]
        if s > score:
            score, best = s, e.answer
    if score >= 0.5:
        return best

    # 5) –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî AI
    return generate_answer_from_model(ql)
